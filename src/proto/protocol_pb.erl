%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.20.0
%% Version source: file
-module(protocol_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_protocol_cmd/1, enum_value_by_symbol_protocol_cmd/1]).
-export([enum_symbol_by_value_protocol_code/1, enum_value_by_symbol_protocol_code/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("protocol_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type protocol_cmd() :: unknown | keep_alive | user_login.
-type protocol_code() :: ok | error.
-export_type([protocol_cmd/0, protocol_code/0]).

%% message types
-type protocol_request() :: #protocol_request{}.

-type protocol_response() :: #protocol_response{}.

-type keep_alive_request() :: #keep_alive_request{}.

-type keep_alive_response() :: #keep_alive_response{}.

-type user_login_request() :: #user_login_request{}.

-type user_login_response() :: #user_login_response{}.

-export_type(['protocol_request'/0, 'protocol_response'/0, 'keep_alive_request'/0, 'keep_alive_response'/0, 'user_login_request'/0, 'user_login_response'/0]).
-type '$msg_name'() :: protocol_request | protocol_response | keep_alive_request | keep_alive_response | user_login_request | user_login_response.
-type '$msg'() :: protocol_request() | protocol_response() | keep_alive_request() | keep_alive_response() | user_login_request() | user_login_response().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/1}).
-endif.
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        protocol_request -> encode_msg_protocol_request(id(Msg, TrUserData), TrUserData);
        protocol_response -> encode_msg_protocol_response(id(Msg, TrUserData), TrUserData);
        keep_alive_request -> encode_msg_keep_alive_request(id(Msg, TrUserData), TrUserData);
        keep_alive_response -> encode_msg_keep_alive_response(id(Msg, TrUserData), TrUserData);
        user_login_request -> encode_msg_user_login_request(id(Msg, TrUserData), TrUserData);
        user_login_response -> encode_msg_user_login_response(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_protocol_request(Msg, TrUserData) -> encode_msg_protocol_request(Msg, <<>>, TrUserData).


encode_msg_protocol_request(#protocol_request{cmd = F1, body = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_protocol_cmd(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData) end.

encode_msg_protocol_response(Msg, TrUserData) -> encode_msg_protocol_response(Msg, <<>>, TrUserData).


encode_msg_protocol_response(#protocol_response{cmd = F1, code = F2, body = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_protocol_cmd(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end,
    begin TrF3 = id(F3, TrUserData), e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData) end.

encode_msg_keep_alive_request(_Msg, _TrUserData) -> <<>>.

encode_msg_keep_alive_response(_Msg, _TrUserData) -> <<>>.

encode_msg_user_login_request(Msg, TrUserData) -> encode_msg_user_login_request(Msg, <<>>, TrUserData).


encode_msg_user_login_request(#user_login_request{username = F1, password = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end.

encode_msg_user_login_response(Msg, TrUserData) -> encode_msg_user_login_response(Msg, <<>>, TrUserData).


encode_msg_user_login_response(#user_login_response{user_id = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end.

e_enum_protocol_cmd(unknown, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_protocol_cmd(keep_alive, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_protocol_cmd(user_login, Bin, _TrUserData) -> <<Bin/binary, 233, 7>>;
e_enum_protocol_cmd(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(protocol_request, Bin, TrUserData) -> id(decode_msg_protocol_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(protocol_response, Bin, TrUserData) -> id(decode_msg_protocol_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(keep_alive_request, Bin, TrUserData) -> id(decode_msg_keep_alive_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(keep_alive_response, Bin, TrUserData) -> id(decode_msg_keep_alive_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(user_login_request, Bin, TrUserData) -> id(decode_msg_user_login_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(user_login_response, Bin, TrUserData) -> id(decode_msg_user_login_response(Bin, TrUserData), TrUserData).



decode_msg_protocol_request(Bin, TrUserData) -> dfp_read_field_def_protocol_request(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_protocol_request(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_protocol_request_cmd(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_protocol_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_protocol_request_body(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_protocol_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #protocol_request{cmd = F@_1, body = F@_2};
dfp_read_field_def_protocol_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_protocol_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_protocol_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_protocol_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_protocol_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_protocol_request_cmd(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_protocol_request_body(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_protocol_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_protocol_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_protocol_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_protocol_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_protocol_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_protocol_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #protocol_request{cmd = F@_1, body = F@_2}.

d_field_protocol_request_cmd(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_protocol_request_cmd(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_protocol_request_cmd(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_protocol_cmd(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_protocol_request(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_protocol_request_body(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_protocol_request_body(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_protocol_request_body(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_protocol_request(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_protocol_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_protocol_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_protocol_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_protocol_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_protocol_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_protocol_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_protocol_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_protocol_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_protocol_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_protocol_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_protocol_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_protocol_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_protocol_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_protocol_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_protocol_response(Bin, TrUserData) -> dfp_read_field_def_protocol_response(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_protocol_response(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_protocol_response_cmd(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_protocol_response(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_protocol_response_code(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_protocol_response(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_protocol_response_body(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_protocol_response(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #protocol_response{cmd = F@_1, code = F@_2, body = F@_3};
dfp_read_field_def_protocol_response(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_protocol_response(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_protocol_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_protocol_response(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_protocol_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_protocol_response_cmd(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_protocol_response_code(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_protocol_response_body(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_protocol_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_protocol_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_protocol_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_protocol_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_protocol_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_protocol_response(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #protocol_response{cmd = F@_1, code = F@_2, body = F@_3}.

d_field_protocol_response_cmd(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_protocol_response_cmd(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_protocol_response_cmd(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_protocol_cmd(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_protocol_response(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_protocol_response_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_protocol_response_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_protocol_response_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_protocol_response(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_protocol_response_body(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_protocol_response_body(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_protocol_response_body(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_protocol_response(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_protocol_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_protocol_response(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_protocol_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_protocol_response(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_protocol_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_protocol_response(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_protocol_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_protocol_response(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_protocol_response(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_protocol_response(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_protocol_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_protocol_response(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_protocol_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_protocol_response(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_keep_alive_request(Bin, TrUserData) -> dfp_read_field_def_keep_alive_request(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_keep_alive_request(<<>>, 0, 0, _, _) -> #keep_alive_request{};
dfp_read_field_def_keep_alive_request(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_keep_alive_request(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_keep_alive_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_keep_alive_request(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_keep_alive_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_keep_alive_request(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_keep_alive_request(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_keep_alive_request(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_keep_alive_request(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_keep_alive_request(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_keep_alive_request(<<>>, 0, 0, _, _) -> #keep_alive_request{}.

skip_varint_keep_alive_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_keep_alive_request(Rest, Z1, Z2, F, TrUserData);
skip_varint_keep_alive_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_keep_alive_request(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_keep_alive_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_keep_alive_request(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_keep_alive_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_keep_alive_request(Rest2, 0, 0, F, TrUserData).

skip_group_keep_alive_request(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_keep_alive_request(Rest, 0, Z2, FNum, TrUserData).

skip_32_keep_alive_request(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_keep_alive_request(Rest, Z1, Z2, F, TrUserData).

skip_64_keep_alive_request(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_keep_alive_request(Rest, Z1, Z2, F, TrUserData).

decode_msg_keep_alive_response(Bin, TrUserData) -> dfp_read_field_def_keep_alive_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_keep_alive_response(<<>>, 0, 0, _, _) -> #keep_alive_response{};
dfp_read_field_def_keep_alive_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_keep_alive_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_keep_alive_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_keep_alive_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_keep_alive_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_keep_alive_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_keep_alive_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_keep_alive_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_keep_alive_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_keep_alive_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_keep_alive_response(<<>>, 0, 0, _, _) -> #keep_alive_response{}.

skip_varint_keep_alive_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_keep_alive_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_keep_alive_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_keep_alive_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_keep_alive_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_keep_alive_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_keep_alive_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_keep_alive_response(Rest2, 0, 0, F, TrUserData).

skip_group_keep_alive_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_keep_alive_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_keep_alive_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_keep_alive_response(Rest, Z1, Z2, F, TrUserData).

skip_64_keep_alive_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_keep_alive_response(Rest, Z1, Z2, F, TrUserData).

decode_msg_user_login_request(Bin, TrUserData) -> dfp_read_field_def_user_login_request(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_user_login_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_user_login_request_username(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_user_login_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_user_login_request_password(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_user_login_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #user_login_request{username = F@_1, password = F@_2};
dfp_read_field_def_user_login_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_user_login_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_user_login_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_user_login_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_user_login_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_user_login_request_username(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_user_login_request_password(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_user_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_user_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_user_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_user_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_user_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_user_login_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #user_login_request{username = F@_1, password = F@_2}.

d_field_user_login_request_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_user_login_request_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_user_login_request_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_user_login_request(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_user_login_request_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_user_login_request_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_user_login_request_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_user_login_request(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_user_login_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_user_login_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_user_login_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_user_login_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_user_login_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_user_login_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_user_login_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_user_login_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_user_login_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_user_login_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_user_login_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_user_login_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_user_login_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_user_login_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_user_login_response(Bin, TrUserData) -> dfp_read_field_def_user_login_response(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_user_login_response(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_user_login_response_user_id(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_user_login_response(<<>>, 0, 0, _, F@_1, _) -> #user_login_response{user_id = F@_1};
dfp_read_field_def_user_login_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_user_login_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_user_login_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_user_login_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_user_login_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_user_login_response_user_id(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_user_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_user_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_user_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_user_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_user_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_user_login_response(<<>>, 0, 0, _, F@_1, _) -> #user_login_response{user_id = F@_1}.

d_field_user_login_response_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_user_login_response_user_id(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_user_login_response_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_user_login_response(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_user_login_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_user_login_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_user_login_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_user_login_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_user_login_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_user_login_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_user_login_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_user_login_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_user_login_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_user_login_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_user_login_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_user_login_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_user_login_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_user_login_response(Rest, Z1, Z2, F, F@_1, TrUserData).

d_enum_protocol_cmd(0) -> unknown;
d_enum_protocol_cmd(1) -> keep_alive;
d_enum_protocol_cmd(1001) -> user_login;
d_enum_protocol_cmd(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        protocol_request -> merge_msg_protocol_request(Prev, New, TrUserData);
        protocol_response -> merge_msg_protocol_response(Prev, New, TrUserData);
        keep_alive_request -> merge_msg_keep_alive_request(Prev, New, TrUserData);
        keep_alive_response -> merge_msg_keep_alive_response(Prev, New, TrUserData);
        user_login_request -> merge_msg_user_login_request(Prev, New, TrUserData);
        user_login_response -> merge_msg_user_login_response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_protocol_request/3}).
merge_msg_protocol_request(#protocol_request{}, #protocol_request{cmd = NFcmd, body = NFbody}, _) -> #protocol_request{cmd = NFcmd, body = NFbody}.

-compile({nowarn_unused_function,merge_msg_protocol_response/3}).
merge_msg_protocol_response(#protocol_response{}, #protocol_response{cmd = NFcmd, code = NFcode, body = NFbody}, _) -> #protocol_response{cmd = NFcmd, code = NFcode, body = NFbody}.

-compile({nowarn_unused_function,merge_msg_keep_alive_request/3}).
merge_msg_keep_alive_request(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_keep_alive_response/3}).
merge_msg_keep_alive_response(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_user_login_request/3}).
merge_msg_user_login_request(#user_login_request{}, #user_login_request{username = NFusername, password = NFpassword}, _) -> #user_login_request{username = NFusername, password = NFpassword}.

-compile({nowarn_unused_function,merge_msg_user_login_response/3}).
merge_msg_user_login_response(#user_login_response{}, #user_login_response{user_id = NFuser_id}, _) -> #user_login_response{user_id = NFuser_id}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        protocol_request -> v_msg_protocol_request(Msg, [MsgName], TrUserData);
        protocol_response -> v_msg_protocol_response(Msg, [MsgName], TrUserData);
        keep_alive_request -> v_msg_keep_alive_request(Msg, [MsgName], TrUserData);
        keep_alive_response -> v_msg_keep_alive_response(Msg, [MsgName], TrUserData);
        user_login_request -> v_msg_user_login_request(Msg, [MsgName], TrUserData);
        user_login_response -> v_msg_user_login_response(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_protocol_request/3}).
-dialyzer({nowarn_function,v_msg_protocol_request/3}).
v_msg_protocol_request(#protocol_request{cmd = F1, body = F2}, Path, TrUserData) ->
    v_enum_protocol_cmd(F1, [cmd | Path], TrUserData),
    v_type_bytes(F2, [body | Path], TrUserData),
    ok;
v_msg_protocol_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, protocol_request}, X, Path).

-compile({nowarn_unused_function,v_msg_protocol_response/3}).
-dialyzer({nowarn_function,v_msg_protocol_response/3}).
v_msg_protocol_response(#protocol_response{cmd = F1, code = F2, body = F3}, Path, TrUserData) ->
    v_enum_protocol_cmd(F1, [cmd | Path], TrUserData),
    v_type_uint32(F2, [code | Path], TrUserData),
    v_type_bytes(F3, [body | Path], TrUserData),
    ok;
v_msg_protocol_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, protocol_response}, X, Path).

-compile({nowarn_unused_function,v_msg_keep_alive_request/3}).
-dialyzer({nowarn_function,v_msg_keep_alive_request/3}).
v_msg_keep_alive_request(#keep_alive_request{}, _Path, _) -> ok;
v_msg_keep_alive_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, keep_alive_request}, X, Path).

-compile({nowarn_unused_function,v_msg_keep_alive_response/3}).
-dialyzer({nowarn_function,v_msg_keep_alive_response/3}).
v_msg_keep_alive_response(#keep_alive_response{}, _Path, _) -> ok;
v_msg_keep_alive_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, keep_alive_response}, X, Path).

-compile({nowarn_unused_function,v_msg_user_login_request/3}).
-dialyzer({nowarn_function,v_msg_user_login_request/3}).
v_msg_user_login_request(#user_login_request{username = F1, password = F2}, Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    ok;
v_msg_user_login_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, user_login_request}, X, Path).

-compile({nowarn_unused_function,v_msg_user_login_response/3}).
-dialyzer({nowarn_function,v_msg_user_login_response/3}).
v_msg_user_login_response(#user_login_response{user_id = F1}, Path, TrUserData) ->
    v_type_uint64(F1, [user_id | Path], TrUserData),
    ok;
v_msg_user_login_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, user_login_response}, X, Path).

-compile({nowarn_unused_function,v_enum_protocol_cmd/3}).
-dialyzer({nowarn_function,v_enum_protocol_cmd/3}).
v_enum_protocol_cmd(unknown, _Path, _TrUserData) -> ok;
v_enum_protocol_cmd(keep_alive, _Path, _TrUserData) -> ok;
v_enum_protocol_cmd(user_login, _Path, _TrUserData) -> ok;
v_enum_protocol_cmd(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_protocol_cmd(X, Path, _TrUserData) -> mk_type_error({invalid_enum, protocol_cmd}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, protocol_cmd}, [{unknown, 0}, {keep_alive, 1}, {user_login, 1001}]},
     {{enum, protocol_code}, [{ok, 0}, {error, 1}]},
     {{msg, protocol_request}, [#field{name = cmd, fnum = 1, rnum = 2, type = {enum, protocol_cmd}, occurrence = required, opts = []}, #field{name = body, fnum = 2, rnum = 3, type = bytes, occurrence = required, opts = []}]},
     {{msg, protocol_response},
      [#field{name = cmd, fnum = 1, rnum = 2, type = {enum, protocol_cmd}, occurrence = required, opts = []},
       #field{name = code, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
       #field{name = body, fnum = 3, rnum = 4, type = bytes, occurrence = required, opts = []}]},
     {{msg, keep_alive_request}, []},
     {{msg, keep_alive_response}, []},
     {{msg, user_login_request}, [#field{name = username, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = password, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []}]},
     {{msg, user_login_response}, [#field{name = user_id, fnum = 1, rnum = 2, type = uint64, occurrence = required, opts = []}]}].


get_msg_names() -> [protocol_request, protocol_response, keep_alive_request, keep_alive_response, user_login_request, user_login_response].


get_group_names() -> [].


get_msg_or_group_names() -> [protocol_request, protocol_response, keep_alive_request, keep_alive_response, user_login_request, user_login_response].


get_enum_names() -> [protocol_cmd, protocol_code].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(protocol_request) -> [#field{name = cmd, fnum = 1, rnum = 2, type = {enum, protocol_cmd}, occurrence = required, opts = []}, #field{name = body, fnum = 2, rnum = 3, type = bytes, occurrence = required, opts = []}];
find_msg_def(protocol_response) ->
    [#field{name = cmd, fnum = 1, rnum = 2, type = {enum, protocol_cmd}, occurrence = required, opts = []},
     #field{name = code, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
     #field{name = body, fnum = 3, rnum = 4, type = bytes, occurrence = required, opts = []}];
find_msg_def(keep_alive_request) -> [];
find_msg_def(keep_alive_response) -> [];
find_msg_def(user_login_request) -> [#field{name = username, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = password, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []}];
find_msg_def(user_login_response) -> [#field{name = user_id, fnum = 1, rnum = 2, type = uint64, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(protocol_cmd) -> [{unknown, 0}, {keep_alive, 1}, {user_login, 1001}];
find_enum_def(protocol_code) -> [{ok, 0}, {error, 1}];
find_enum_def(_) -> error.


enum_symbol_by_value(protocol_cmd, Value) -> enum_symbol_by_value_protocol_cmd(Value);
enum_symbol_by_value(protocol_code, Value) -> enum_symbol_by_value_protocol_code(Value).


enum_value_by_symbol(protocol_cmd, Sym) -> enum_value_by_symbol_protocol_cmd(Sym);
enum_value_by_symbol(protocol_code, Sym) -> enum_value_by_symbol_protocol_code(Sym).


enum_symbol_by_value_protocol_cmd(0) -> unknown;
enum_symbol_by_value_protocol_cmd(1) -> keep_alive;
enum_symbol_by_value_protocol_cmd(1001) -> user_login.


enum_value_by_symbol_protocol_cmd(unknown) -> 0;
enum_value_by_symbol_protocol_cmd(keep_alive) -> 1;
enum_value_by_symbol_protocol_cmd(user_login) -> 1001.

enum_symbol_by_value_protocol_code(0) -> ok;
enum_symbol_by_value_protocol_code(1) -> error.


enum_value_by_symbol_protocol_code(ok) -> 0;
enum_value_by_symbol_protocol_code(error) -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"protocol_request">>) -> protocol_request;
fqbin_to_msg_name(<<"protocol_response">>) -> protocol_response;
fqbin_to_msg_name(<<"keep_alive_request">>) -> keep_alive_request;
fqbin_to_msg_name(<<"keep_alive_response">>) -> keep_alive_response;
fqbin_to_msg_name(<<"user_login_request">>) -> user_login_request;
fqbin_to_msg_name(<<"user_login_response">>) -> user_login_response;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(protocol_request) -> <<"protocol_request">>;
msg_name_to_fqbin(protocol_response) -> <<"protocol_response">>;
msg_name_to_fqbin(keep_alive_request) -> <<"keep_alive_request">>;
msg_name_to_fqbin(keep_alive_response) -> <<"keep_alive_response">>;
msg_name_to_fqbin(user_login_request) -> <<"user_login_request">>;
msg_name_to_fqbin(user_login_response) -> <<"user_login_response">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"protocol_cmd">>) -> protocol_cmd;
fqbin_to_enum_name(<<"protocol_code">>) -> protocol_code;
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin(protocol_cmd) -> <<"protocol_cmd">>;
enum_name_to_fqbin(protocol_code) -> <<"protocol_code">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "protocol.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["protocol.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["protocol"].


get_msg_containment("protocol") -> [keep_alive_request, keep_alive_response, protocol_request, protocol_response, user_login_request, user_login_response];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("protocol") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("protocol") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("protocol") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("protocol") -> [protocol_cmd, protocol_code];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"user_login_request">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"protocol_request">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"keep_alive_request">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"user_login_response">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"protocol_response">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"keep_alive_response">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"protocol_cmd">>) -> "protocol";
get_proto_by_enum_name_as_fqbin(<<"protocol_code">>) -> "protocol";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.20.0".

gpb_version_as_list() ->
    [4,20,0].

gpb_version_source() ->
    "file".
